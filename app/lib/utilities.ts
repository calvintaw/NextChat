import { NewsArticle } from "./definitions";
import { socket } from "./socket";

export function getDMRoom(a: string, b?: string) {
	if (typeof b === "undefined") {
		return `@me:${a}`;
	}

	const [u1, u2] = [a, b].sort();
	return `@me:${u1}:${u2}`;
}

export const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

export function formatNumber(num?: number) {
	if (!num) return "0";
	if (num >= 1_000_000_000) return (num / 1_000_000_000).toFixed(1) + "B";
	if (num >= 1_000_000) return (num / 1_000_000).toFixed(1) + "M";
	if (num >= 1_000) return (num / 1_000).toFixed(1) + "K";
	return num.toString();
}

// generated by chatgpt (I am not good with regex)
export const normalizeMarkdown = (str: string) =>
	str
		.replace(/\r\n/g, "\n") // normalize line endings
		.split("\n") // split into lines
		.map((line) => line.trim()) // trim each line
		.filter((line) => line.length > 0) // remove empty lines
		.join("\n") // join lines back
		.trim(); // trim whole string

export function isServerRoom(roomId: string) {
	return !roomId.startsWith("@me:");
}

export function getLocalTimeString(date: string | Date, options?: Intl.DateTimeFormatOptions): string {
	const d = typeof date === "string" ? new Date(date) : date;
	return d.toLocaleTimeString([], options);
}

// generated by chatgpt
export function mapExternalArticle(article: any): NewsArticle {
	return {
		source: {
			id: article.source_id || null,
			name: Array.isArray(article.creator) ? article.creator[0] : article.creator || "Unknown",
		},
		author: Array.isArray(article.creator) ? article.creator[0] : article.creator || null,
		title: article.title,
		description: article.description || article.full_description || null,
		url: article.link,
		urlToImage: article.image_url || null,
		publishedAt: article.pubDate ? new Date(article.pubDate).toISOString() : new Date().toISOString(),
		content: article.content || null,
	};
}

export const getBackgroundColorByInitial = (char: string): string => {
	if (!char) return "bg-primary";

	const initial = char.toUpperCase();

	if ("ABC".includes(initial)) return "bg-rose-500";
	if ("DEF".includes(initial)) return "bg-amber-500";
	if ("GHI".includes(initial)) return "bg-emerald-500";
	if ("JKL".includes(initial)) return "bg-teal-500";
	if ("MNO".includes(initial)) return "bg-sky-500";
	if ("PQR".includes(initial)) return "bg-indigo-500";
	if ("STU".includes(initial)) return "bg-violet-500";
	if ("VWX".includes(initial)) return "bg-pink-500";
	if ("YZ".includes(initial)) return "bg-lime-500";

	return "bg-primary";
};

export function getBannerColor(char: string) {
	if (!char) return "bg-secondary";
	const initial = char.toUpperCase();

	if ("ABC".includes(initial)) return "bg-rose-600";
	if ("DEF".includes(initial)) return "bg-amber-600";
	if ("GHI".includes(initial)) return "bg-emerald-600";
	if ("JKL".includes(initial)) return "bg-teal-600";
	if ("MNO".includes(initial)) return "bg-sky-600";
	if ("PQR".includes(initial)) return "bg-indigo-600";
	if ("STU".includes(initial)) return "bg-violet-600";
	if ("VWX".includes(initial)) return "bg-pink-600";
	if ("YZ".includes(initial)) return "bg-lime-600";

	return "bg-secondary";
}

export function sendWithRetry(event: string, msg: any, retries = 3, delay = 2000) {
	return new Promise((resolve, reject) => {
		let attempts = 0;

		const attempt = () => {
			attempts++;
			// console.log(`Sending attempt ${attempts} for event "${event}"`);

			socket.timeout(5000).emit(event, msg, (err: any, response?: any) => {
				if (err) {
					// console.warn(`No ack from server for "${event}" (attempt ${attempts})`);

					if (attempts < retries) {
						setTimeout(attempt, delay); // retry after delay
					} else {
						reject(new Error(`Failed after ${retries} attempts`));
					}
				} else {
					// console.log(`Ack received for "${event}":`, response);
					resolve(response);
				}
			});
		};

		attempt();
	});
}
